1) Created an virtual envviornment - env
        ==> virtualenv env

2) Activated virtual env
        ==> source bin/activate

3) Installed djnago in this virtual env 
        ==> pip3 install django==3.0.1

4) Created a project geekysid
        ==> django-admin startproject TreasureHunt

5) At root folder of project, created a folder with 'template' and created an blank index.html file in it.

6) >TreasureHunt>TreasureHunt

7) Into the settings.py, added a template settings
        'DIRS': [
            os.path.join(BASE_DIR, 'template'),
        ],

8) Made few changes to urlpatterns insid urls.py
        from . import views

        urlpatterns = [
            path('', views.index, name='index),
        ]

9) Create a new file views.py and write following code in it:
        from django.shortcuts import render
        from django.http import HttpResponse
        from django.conf import settings

        def home(request):
        return render(request, 'index.html')

10) In order to make the theme work, we need to add all static files, js, css, fonts and other static files to the project.
    a) Create a 'static' folder at root and add all the required static files to this folder.
    b) now we go settings.py file and configure static files location to let django know where we have placed all our static files.
        settings.py >
            STATIC_URL = '/static/'     # this how we will refer to static files locations
            STATICFILES_DIRS = [
                os.path.join(BASE_DIR, 'static'),   # place where we will store our static files
            ]
            STATIC_ROOT = os.path.join(BASE_DIR, 'assets')  # place where django will store its static files.

            MEDIA_URL = '/media/'
            MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

    c) now we go urls.py file and add urls for static and media files.
        urls.py >
            urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
            urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)

    d) now we will tell django to collect static files from static folder and store it into assets folder.
            ==> python3 manage.py collectstatic


11) Copy the theme's index.html content into our template's index.html file. and

12) Add '{% load static %}' at the top of the index.html

13) Add "{% static '' %}" to everyplace in index.html that has a static file.
        eg: <link rel="stylesheet" href="{% static 'home/css/glitche-basic.css' %}" />
	        <link rel="stylesheet" href="{% static 'home/css/glitche-layout.css' %}" />
	        <link rel="stylesheet" href="{% static 'home/css/ionicons.css' %}" />
	        <link rel="stylesheet" href="{% static 'home/css/magnific-popup.css' %}" />
	        <link rel="stylesheet" href="{% static 'home/css/animate.css' %}" />








-- ****************** Database Model ******************;
-- ***************************************************;

-- `Users` ***** User Details
CREATE TABLE `Users`
(
 `username`         text NOT NULL ,             PRIMARY KEY
 `id`               integer NOT NULL ,
 `first_name`       text NOT NULL ,
 `last_name`        text NOT NULL ,
 `email`            text NOT NULL ,
 `password`         text NOT NULL ,
 `groups`           text NOT NULL ,
 `user_permissions` text NOT NULL ,
 `is_staff`         int NOT NULL ,
 `is_active`        int NOT NULL ,
 `is_superuser`     binary NOT NULL ,
 `last_login`       datetime NOT NULL ,
 `date_joined`      datetime NOT NULL ,
);


-- `Riddle_Category` ******** Category of Riddles
CREATE TABLE `Riddle_Category`
(
 `cat_id` int NOT NULL ,                PRIMARY KEY
 `name`   text NOT NULL ,
 `desc`   longtext NOT NULL ,
);


-- `Riddle` ************ Actual Riddles
CREATE TABLE `Riddle`
(
 `riddle_id` int NOT NULL ,             PRIMARY KEY
 `question`  longtext NOT NULL ,        FOREIGN KEY  REFERENCES `Riddle_Category` (`cat_id`)
 `answer_1`  text NOT NULL ,
 `cat_id`    int NOT NULL ,
 `answer_2`  text NULL ,
 `answer_3`  text NULL ,
 `answer_4`  text NULL ,
 `answer_5`  text NULL ,
 `answer_6`  text NULL ,
 `answer_7`  text NULL ,
 `answer_8`  text NULL ,
 `answer_9`  text NULL ,

KEY `fkIdx_30` (`cat_id`),
);


--  `Den` ************** individual Hunting Den
CREATE TABLE `Den`
(
 `den_id`          int NOT NULL ,               PRIMARY KEY
 `admin_id`        integer NOT NULL ,           FOREIGN KEY REFERENCES `Users` (`id`)
 `name`            text NOT NULL ,
 `desc`            text NOT NULL ,
 `image`           binary NOT NULL ,
 `score`           integer NOT NULL ,
 `is_active`       integer NOT NULL ,
 `started_at`      datetime NOT NULL ,
 `ended_at`        date NOT NULL ,
 `invitation_code` text NOT NULL ,
)

-- `Hunters` ************** Users mapped to Hunting Den
CREATE TABLE `Hunters`
(
 `map_id`  integer NOT NULL ,           PRIMARY KEY
 `user_id` integer NOT NULL ,           FOREIGN KEY REFERENCES `Users` (`id`)
 `den_id`  int NOT NULL ,               FOREIGN KEY REFERENCES `Den` (`den_id`)
);


-- `Den_Riddle` *************** Holds mapping of riddles to each den
CREATE TABLE `Den_Riddle`
(
 `den_riddle_id`    integer NOT NULL ,        PRIMARY KEY
 `den_id`     int NOT NULL ,            FOREIGN KEY REFERENCES `Den` (`den_id`)
 `riddle_id`  int NOT NULL ,            FOREIGN KEY REFERENCES `Riddle` (`riddle_id`)
 `started_at` datetime NOT NULL ,
 `ending_at`  datetime NOT NULL ,
 `is_active`  integer NOT NULL ,
);


-- `Response` *************** Holds Response to Users
CREATE TABLE `Response`
(
 `answer_id`     integer NOT NULL ,             PRIMARY KEY
 `den_riddle_id` integer NOT NULL ,             FOREIGN KEY REFERENCES `Den_Riddle` (`hunt_id`)
 `hunter_id`     integer NOT NULL ,             FOREIGN KEY REFERENCES `Users` (`id`)
 `answer`        text NOT NULL ,
 `response_time` datetime NOT NULL ,
 `score`         integer NOT NULL ,
 `image`         binary NOT NULL ,
);




