

Allowing user to upload File
    We Need to make sure pillow library is installed in our enviornment. This library is required to woth with upload.
        pip3 install pillow
    
    Using ImageField
        Use Image field with keyword argument upload_to as:
            image = models.ImageField(upload_to='path-of-upload')
            image = models.ImageField(upload_to='image/%Y/%d/%d')  # this will uplaod file to image/2019/12/25
    
    Adding Media URL
        settings.py:
            1. MEDIA_URL = os.path.join(BASE_DIR, 'folder-to-store-media')
                Example: MEDIA_URL = os.path.join(BASE_DIR, 'media')
            2. MEDIA_ROOT = '/folder-to-store-media/'
                Example: MEDIA_ROOT = '/media/'
            
        Now we need to specify these urls to in the urls.py of the project
        urls.py:
            1. urlpatterns += static(settings.MEDIA_URL, document_url=settings.MEDIA_ROOT)
            
    This will store the file in media/image/2019/12/25 folder where media folder will be @ the root of the project


USING MANAGE.PY SHELL
    1st import the class from models
    fetchinga all rows from a tabel or object.
        Code:           class_obj = class_name.objects.all()            # returns all rows in the form of list
        In Our Case:    prod_obj = Products.object.all()               # returns all product in the form of list

    Displaying result of fetch:
        Code:           for obj in class_obj:
                            print(o.fieldsName)
        In our Case:    for prod in prod_obj:
                            print('Book: ' + p.name + '\t\t Price: '+ str(p.price))

    To fetch row dependings on a value of a field. It is important to note that this must return only 1 value else we get an error:
        Code:           calss_obj = class_name.objects.get(fieldName = 'value') # should return only 1 row which matches the criteria
                        print(o.fieldsName)
        In our Case:    prod_obj = Products.objects.get(category='coding')
                        print('Book: ' + p.name + '\t\t Price: '+ str(p.price))
    
    To fetch more then 1 row dependings on a value of a field: 
        Code:           class_obj = class_name.objects.filter(field_name='value')   # returns all rows in the form of list which matches criteria
                        for obj in class_obj:
                            print(obj)
        In our Case:    prod_obj = Products.objects.filter(category='MBA') # returns 2 objects
                        for prod in prod_obj:
                            print(prod)
        We can use .first(number_of_rows) to fetch only a giver number a results in this case.
        Code:           prod_obj = Products.objects.filter(category='MBA').first(1) # this will return only 1 matching row in the form of list



INDEX PAGE:
    Used carousel form bootstrap. 
    
    Carousel has 3 part: 
        Carousel : which defines the start of carouserl.
        Crousel-inner: which defines spave inside which slide will be place
        Crousel-item: slides.
    
    Carousel has 2 componenets:
        carousel-indicators: which are tied to the id of the carousel as data-target and have a data-slide-to attribute set to the number of 
                slide which will be active when it is clicked.
        crrousel-control: which basically have 2 anchor points which also has id of carousel as data-target and have a data-slide attribute 
                set to 'prev if it is meant to bring prev slide or set to next if its meant to display next slide
    
    Here we have used a card from bootstrap so that we have 4 card per slide in all carousel.
    
in views.oy we are using 